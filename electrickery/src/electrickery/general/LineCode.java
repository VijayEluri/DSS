/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package electrickery.general;

import cern.colt.matrix.tdouble.DoubleMatrix2D;

import electrickery.common.lengthUnit;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Line Code</b></em>'.
 * <!-- end-user-doc -->
 *
 * <!-- begin-model-doc -->
 * The Linecode object is a general DSS object used by all circuits
 * as a reference for obtaining line impedances.
 * 
 * Linecodes are objects that contain impedance characteristics for lines and
 * cables.  The term "line code" is an old term that simply refers to a code
 * that was made up by programmers to describe a line construction.  In most
 * distribution analysis programs, one can describe a line by its linecode
 * and its length.  Linecodes were defined in a separate file.  This
 * collection of objects emulates the old linecode files, except that the
 * concept is slightly more powerful.
 * 
 * Ultimately, the impedance of a line is described by its series impedance
 * matrix and nodal capacitive admittance matrix.  These matrices may be
 * specified directly or they can be generated by specifying the symmetrical
 * component data.  Note that the impedances of lines may be specified
 * directly and one does not need to use a line code, although the linecode
 * will be more convenient most of the time.  There may be hundreds of lines,
 * but only a few different kinds of line constructions.
 * 
 * LineCode also performs a Kron reduction, reducing out the last conductor
 * in the impedance matrices, which is assumed to be a neutral conductor.
 * This applies only if the impedance is specified as a matrix. If the
 * impedance is defined as symmetrical components, this function does not
 * apply because symmetrical component values already assume the reduction.
 * 
 * By specifying the values of Rg, Xg, and rho, the DSS will take the base
 * frequency impedance matrix values and adjust the earth return component
 * for frequency. Skin effect in the conductors is not modified. To represent
 * skin effect, you have to define the geometry.
 * 
 * This assumes the impedance matrix is constructed as follows:
 * 
 *              Z_{11} + Z_{g} Z_{12} + Z_{g} Z_{13} + Z_{g}
 * 
 * Z = R + jX = Z_{21} + Z_{g} Z_{22} + Z_{g} Z_{23} + Z_{g}
 * 
 *              Z_{31} + Z_{g} Z_{32} + Z_{g} Z_{33} + Z_{g}
 * <!-- end-model-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link electrickery.general.LineCode#getNPhases <em>NPhases</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getR1 <em>R1</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getX1 <em>X1</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getR0 <em>R0</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getX0 <em>X0</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getC1 <em>C1</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getC0 <em>C0</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getUnits <em>Units</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getRMatrix <em>RMatrix</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getXMatrix <em>XMatrix</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getCMatrix <em>CMatrix</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getBaseFreq <em>Base Freq</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getNormAmps <em>Norm Amps</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getEmergAmps <em>Emerg Amps</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getFaultRate <em>Fault Rate</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getPctPerm <em>Pct Perm</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getRepair <em>Repair</em>}</li>
 *   <li>{@link electrickery.general.LineCode#isKron <em>Kron</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getRg <em>Rg</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getXg <em>Xg</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getRho <em>Rho</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getNeutral <em>Neutral</em>}</li>
 *   <li>{@link electrickery.general.LineCode#getLike <em>Like</em>}</li>
 * </ul>
 * </p>
 *
 * @see electrickery.general.GeneralPackage#getLineCode()
 * @model
 * @generated
 */
public interface LineCode extends EObject {
    /**
	 * Returns the value of the '<em><b>NPhases</b></em>' attribute.
	 * The default value is <code>"3"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Number of phases in the line this line code data represents.  Setting this property reinitializes the line code.  Impedance matrix is reset for default symmetrical component.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>NPhases</em>' attribute.
	 * @see #setNPhases(int)
	 * @see electrickery.general.GeneralPackage#getLineCode_NPhases()
	 * @model default="3"
	 * @generated
	 */
    int getNPhases();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getNPhases <em>NPhases</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>NPhases</em>' attribute.
	 * @see #getNPhases()
	 * @generated
	 */
    void setNPhases(int value);

    /**
	 * Returns the value of the '<em><b>R1</b></em>' attribute.
	 * The default value is <code>"0.058"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Positive-sequence Resistance, ohms per unit length.  See also rMatrix.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>R1</em>' attribute.
	 * @see #setR1(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_R1()
	 * @model default="0.058"
	 * @generated
	 */
    double getR1();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getR1 <em>R1</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>R1</em>' attribute.
	 * @see #getR1()
	 * @generated
	 */
    void setR1(double value);

    /**
	 * Returns the value of the '<em><b>X1</b></em>' attribute.
	 * The default value is <code>"0.1206"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Positive-sequence Reactance, ohms per unit length.  See also xMatrix.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>X1</em>' attribute.
	 * @see #setX1(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_X1()
	 * @model default="0.1206"
	 * @generated
	 */
    double getX1();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getX1 <em>X1</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>X1</em>' attribute.
	 * @see #getX1()
	 * @generated
	 */
    void setX1(double value);

    /**
	 * Returns the value of the '<em><b>R0</b></em>' attribute.
	 * The default value is <code>"0.4047"</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Zero-sequence Resistance, ohms per unit length.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>R0</em>' attribute.
	 * @see #setR0(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_R0()
	 * @model default="0.4047"
	 * @generated
	 */
	double getR0();

				/**
	 * Sets the value of the '{@link electrickery.general.LineCode#getR0 <em>R0</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>R0</em>' attribute.
	 * @see #getR0()
	 * @generated
	 */
	void setR0(double value);

				/**
	 * Returns the value of the '<em><b>X0</b></em>' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Zero-sequence Reactance, ohms per unit length.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>X0</em>' attribute.
	 * @see #setX0(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_X0()
	 * @model
	 * @generated
	 */
    double getX0();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getX0 <em>X0</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>X0</em>' attribute.
	 * @see #getX0()
	 * @generated
	 */
    void setX0(double value);

    /**
	 * Returns the value of the '<em><b>C1</b></em>' attribute.
	 * The default value is <code>"3.4"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Positive-sequence capacitance, nF per unit length. See also cMatrix.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>C1</em>' attribute.
	 * @see #setC1(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_C1()
	 * @model default="3.4"
	 * @generated
	 */
    double getC1();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getC1 <em>C1</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>C1</em>' attribute.
	 * @see #getC1()
	 * @generated
	 */
    void setC1(double value);

    /**
	 * Returns the value of the '<em><b>C0</b></em>' attribute.
	 * The default value is <code>"1.6"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Zero-sequence capacitance, nF per unit length.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>C0</em>' attribute.
	 * @see #setC0(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_C0()
	 * @model default="1.6"
	 * @generated
	 */
    double getC0();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getC0 <em>C0</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>C0</em>' attribute.
	 * @see #getC0()
	 * @generated
	 */
    void setC0(double value);

    /**
	 * Returns the value of the '<em><b>Units</b></em>' attribute.
	 * The default value is <code>"none"</code>.
	 * The literals are from the enumeration {@link electrickery.common.lengthUnit}.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * One of (ohms per ...) {none|mi|km|kft|m|me|ft|in|cm}.  Default is none; assumes units agree with length units given in Line object.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Units</em>' attribute.
	 * @see electrickery.common.lengthUnit
	 * @see #setUnits(lengthUnit)
	 * @see electrickery.general.GeneralPackage#getLineCode_Units()
	 * @model default="none"
	 * @generated
	 */
    lengthUnit getUnits();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getUnits <em>Units</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Units</em>' attribute.
	 * @see electrickery.common.lengthUnit
	 * @see #getUnits()
	 * @generated
	 */
    void setUnits(lengthUnit value);

    /**
	 * Returns the value of the '<em><b>RMatrix</b></em>' reference.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Resistance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases.  May be used to specify the impedance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>RMatrix</em>' reference.
	 * @see #setRMatrix(DoubleMatrix2D)
	 * @see electrickery.general.GeneralPackage#getLineCode_RMatrix()
	 * @model type="electrickery.DoubleMatrix2D"
	 * @generated
	 */
    DoubleMatrix2D getRMatrix();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getRMatrix <em>RMatrix</em>}' reference.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>RMatrix</em>' reference.
	 * @see #getRMatrix()
	 * @generated
	 */
    void setRMatrix(DoubleMatrix2D value);

    /**
	 * Returns the value of the '<em><b>XMatrix</b></em>' reference.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Reactance matrix, lower triangle, ohms per unit length. Order of the matrix is the number of phases.  May be used to specify the impedance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>XMatrix</em>' reference.
	 * @see #setXMatrix(DoubleMatrix2D)
	 * @see electrickery.general.GeneralPackage#getLineCode_XMatrix()
	 * @model type="electrickery.DoubleMatrix2D"
	 * @generated
	 */
    DoubleMatrix2D getXMatrix();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getXMatrix <em>XMatrix</em>}' reference.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>XMatrix</em>' reference.
	 * @see #getXMatrix()
	 * @generated
	 */
    void setXMatrix(DoubleMatrix2D value);

    /**
	 * Returns the value of the '<em><b>CMatrix</b></em>' reference.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Nodal Capacitance matrix, lower triangle, nf per unit length.Order of the matrix is the number of phases.  May be used to specify the shunt capacitance of any line configuration.  For balanced line models, you may use the standard symmetrical component data definition instead.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>CMatrix</em>' reference.
	 * @see #setCMatrix(DoubleMatrix2D)
	 * @see electrickery.general.GeneralPackage#getLineCode_CMatrix()
	 * @model type="electrickery.DoubleMatrix2D"
	 * @generated
	 */
    DoubleMatrix2D getCMatrix();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getCMatrix <em>CMatrix</em>}' reference.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>CMatrix</em>' reference.
	 * @see #getCMatrix()
	 * @generated
	 */
    void setCMatrix(DoubleMatrix2D value);

    /**
	 * Returns the value of the '<em><b>Base Freq</b></em>' attribute.
	 * The default value is <code>"60.0"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Frequency (Hz) at which impedances are specified.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Base Freq</em>' attribute.
	 * @see #setBaseFreq(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_BaseFreq()
	 * @model default="60.0"
	 * @generated
	 */
    double getBaseFreq();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getBaseFreq <em>Base Freq</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Base Freq</em>' attribute.
	 * @see #getBaseFreq()
	 * @generated
	 */
    void setBaseFreq(double value);

    /**
	 * Returns the value of the '<em><b>Norm Amps</b></em>' attribute.
	 * The default value is <code>"400.0"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Normal ampere limit on line.  This is the so-called Planning Limit. It may also be the value above which load will have to be dropped in a contingency.  Usually about 75% - 80% of the emergency (one-hour) rating.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Norm Amps</em>' attribute.
	 * @see #setNormAmps(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_NormAmps()
	 * @model default="400.0"
	 * @generated
	 */
    double getNormAmps();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getNormAmps <em>Norm Amps</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Norm Amps</em>' attribute.
	 * @see #getNormAmps()
	 * @generated
	 */
    void setNormAmps(double value);

    /**
	 * Returns the value of the '<em><b>Emerg Amps</b></em>' attribute.
	 * The default value is <code>"600.0"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Emergency ampere limit on line (usually one-hour rating).
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Emerg Amps</em>' attribute.
	 * @see #setEmergAmps(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_EmergAmps()
	 * @model default="600.0"
	 * @generated
	 */
    double getEmergAmps();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getEmergAmps <em>Emerg Amps</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Emerg Amps</em>' attribute.
	 * @see #getEmergAmps()
	 * @generated
	 */
    void setEmergAmps(double value);

    /**
	 * Returns the value of the '<em><b>Fault Rate</b></em>' attribute.
	 * The default value is <code>"0.1"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Number of faults per unit length per year.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Fault Rate</em>' attribute.
	 * @see #setFaultRate(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_FaultRate()
	 * @model default="0.1"
	 * @generated
	 */
    double getFaultRate();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getFaultRate <em>Fault Rate</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Fault Rate</em>' attribute.
	 * @see #getFaultRate()
	 * @generated
	 */
    void setFaultRate(double value);

    /**
	 * Returns the value of the '<em><b>Pct Perm</b></em>' attribute.
	 * The default value is <code>"20"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Percentage of the faults that become permanent (requiring a line crew to repair and a sustained interruption).
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Pct Perm</em>' attribute.
	 * @see #setPctPerm(int)
	 * @see electrickery.general.GeneralPackage#getLineCode_PctPerm()
	 * @model default="20"
	 * @generated
	 */
    int getPctPerm();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getPctPerm <em>Pct Perm</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Pct Perm</em>' attribute.
	 * @see #getPctPerm()
	 * @generated
	 */
    void setPctPerm(int value);

    /**
	 * Returns the value of the '<em><b>Repair</b></em>' attribute.
	 * The default value is <code>"3"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Hours to repair.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Repair</em>' attribute.
	 * @see #setRepair(int)
	 * @see electrickery.general.GeneralPackage#getLineCode_Repair()
	 * @model default="3"
	 * @generated
	 */
    int getRepair();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getRepair <em>Repair</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Repair</em>' attribute.
	 * @see #getRepair()
	 * @generated
	 */
    void setRepair(int value);

    /**
	 * Returns the value of the '<em><b>Kron</b></em>' attribute.
	 * The default value is <code>"false"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Perform Kron reduction on the impedance matrix after it is formed, reducing order by 1.  Do this only on initial definition after matrices are defined. Ignored for symmetrical components.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Kron</em>' attribute.
	 * @see #setKron(boolean)
	 * @see electrickery.general.GeneralPackage#getLineCode_Kron()
	 * @model default="false"
	 * @generated
	 */
    boolean isKron();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#isKron <em>Kron</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Kron</em>' attribute.
	 * @see #isKron()
	 * @generated
	 */
    void setKron(boolean value);

    /**
	 * Returns the value of the '<em><b>Rg</b></em>' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Carson earth return resistance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Rg</em>' attribute.
	 * @see #setRg(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_Rg()
	 * @model
	 * @generated
	 */
    double getRg();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getRg <em>Rg</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Rg</em>' attribute.
	 * @see #getRg()
	 * @generated
	 */
    void setRg(double value);

    /**
	 * Returns the value of the '<em><b>Xg</b></em>' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Carson earth return reactance per unit length used to compute impedance values at base frequency.  For making better frequency adjustments.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Xg</em>' attribute.
	 * @see #setXg(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_Xg()
	 * @model
	 * @generated
	 */
    double getXg();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getXg <em>Xg</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Xg</em>' attribute.
	 * @see #getXg()
	 * @generated
	 */
    void setXg(double value);

    /**
	 * Returns the value of the '<em><b>Rho</b></em>' attribute.
	 * The default value is <code>"100.0"</code>.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Earth resitivity (meter ohms used to compute earth correction factor).
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Rho</em>' attribute.
	 * @see #setRho(double)
	 * @see electrickery.general.GeneralPackage#getLineCode_Rho()
	 * @model default="100.0"
	 * @generated
	 */
    double getRho();

    /**
	 * Sets the value of the '{@link electrickery.general.LineCode#getRho <em>Rho</em>}' attribute.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Rho</em>' attribute.
	 * @see #getRho()
	 * @generated
	 */
    void setRho(double value);

				/**
	 * Returns the value of the '<em><b>Neutral</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * Designates which conductor is the "neutral" conductor that will be eliminated by Kron reduction.
	 * Default is the last conductor (nphases value). After Kron reduction is set to 0. Subsequent issuing of Kron=Yes
	 * will not do anything until this property is set to a legal value. Applies only to LineCodes defined by R, X, and C matrix.
	 * <!-- end-model-doc -->
	 * @return the value of the '<em>Neutral</em>' attribute.
	 * @see #setNeutral(int)
	 * @see electrickery.general.GeneralPackage#getLineCode_Neutral()
	 * @model
	 * @generated
	 */
	int getNeutral();

				/**
	 * Sets the value of the '{@link electrickery.general.LineCode#getNeutral <em>Neutral</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Neutral</em>' attribute.
	 * @see #getNeutral()
	 * @generated
	 */
	void setNeutral(int value);

				/**
	 * Returns the value of the '<em><b>Like</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Like</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Like</em>' reference.
	 * @see #setLike(LineCode)
	 * @see electrickery.general.GeneralPackage#getLineCode_Like()
	 * @model
	 * @generated
	 */
	LineCode getLike();

				/**
	 * Sets the value of the '{@link electrickery.general.LineCode#getLike <em>Like</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Like</em>' reference.
	 * @see #getLike()
	 * @generated
	 */
	void setLike(LineCode value);

} // LineCode
