// automatically generated by Xtext
grammar electrickery.dsl.ElectrickeryDSL with org.eclipse.xtext.common.Terminals

import "http://www.electrickery.com/conversion" as conversion

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.electrickery.com/common" as common

import "http://www.electrickery.com/"

import "http://www.electrickery.com/general" as general

import "http://www.electrickery.com/meter" as meter

import "http://www.electrickery.com/delivery" as delivery

import "http://www.electrickery.com/control" as control

//import "platform:/resource/electrickery/model/Electrickery.ecore" as executive
import "http://www.electrickery.com/executive" as executive

Circuit returns common::Circuit:
  (solved?='solved')?
  (control_busNameRedefined?='control_busNameRedefined')?
  'Circuit'
  name=EString
  '{'
    ('numNodes' numNodes=EInt)?
    ('generatorDispatchReference' generatorDispatchReference=EDouble)?
    ('genMultiplier' genMultiplier=EDouble)?
    ('busNameRedefined' busNameRedefined=EBoolean)?
    ('loadMultiplier' loadMultiplier=EDouble)?
    ('defaultGrowthFactor' defaultGrowthFactor=EDouble)?
    ('defaultHourMult' defaultHourMult=EDouble)?
    ('priceSignal' priceSignal=EDouble)?
    'solution' solution=[common::Solution|EString]
    'controlQueue' controlQueue=[common::ControlQueue|EString]
    ('lines' '(' lines+=[delivery::Line|EString] ( "," lines+=[delivery::Line|EString])* ')' )?
    ('loads' '(' loads+=[conversion::Load|EString] ( "," loads+=[conversion::Load|EString])* ')' )?
    ('shuntCapacitors' '(' shuntCapacitors+=[delivery::Capacitor|EString] ( "," shuntCapacitors+=[delivery::Capacitor|EString])* ')' )?
    ('feeder' '(' feeder+=[common::Feeder|EString] ( "," feeder+=[common::Feeder|EString])* ')' )?
    ('busList' '{' busList+=Bus ( "," busList+=Bus)* '}' )?
    ('faults' '{' faults+=Fault ( "," faults+=Fault)* '}' )?
    ('voltageSources' '{' voltageSources+=VoltageSource ( "," voltageSources+=VoltageSource)* '}' )?
    ('currentSources' '{' currentSources+=CurrentSource ( "," currentSources+=CurrentSource)* '}' )?
    ('sensors' '{' sensors+=Sensor ( "," sensors+=Sensor)* '}' )?
    ('monitors' '{' monitors+=Monitor ( "," monitors+=Monitor)* '}' )?
    ('energyMeters' '{' energyMeters+=EnergyMeter ( "," energyMeters+=EnergyMeter)* '}' )?
    ('generators' '{' generators+=Generator ( "," generators+=Generator)* '}' )?
    ('transformers' '{' transformers+=Transformer ( "," transformers+=Transformer)* '}' )?
    ('capControls' '{' capControls+=CapacitorControl ( "," capControls+=CapacitorControl)* '}' )?
    ('regControls' '{' regControls+=RegulatorControl ( "," regControls+=RegulatorControl)* '}' )?
    '}';


EStructuralFeature returns ecore::EStructuralFeature:
  EAttribute | EReference;

EClassifier returns ecore::EClassifier:
  EClass | EDataType_Impl | EEnum;

Solution returns common::Solution:
  {common::Solution}
  (preserveNodeVoltages?='preserveNodeVoltages')?
  (frequencyChanged?='frequencyChanged')?
  (solutionAbort?='solutionAbort')?
  (solutionInitialised?='solutionInitialised')?
  (seriesYInvalid?='seriesYInvalid')?
  (systemYChanged?='systemYChanged')?
  (voltageBaseChanged?='voltageBaseChanged')?
  (harmonicModel?='harmonicModel')?
  (dynamicModel?='dynamicModel')?
  (useAuxillaryCurrents?='useAuxillaryCurrents')?
  (loadsNeedUpdating?='loadsNeedUpdating')?
  (converged?='converged')?
  (controlActionsDone?='controlActionsDone')?
  (lastSolutionWasDirect?='lastSolutionWasDirect')?
  'Solution'
  '{'
    ('year' year=EInt)?
    ('frequency' frequency=EDouble)?
    ('mode' mode=solutionMode)?
    ('loadModel' loadModel=loadModelType)?
    ('iteration' iteration=EInt)?
    ('maxIterations' maxIterations=EInt)?
    ('maxError' maxError=EDouble)?
    ('convergenceTolerance' convergenceTolerance=EDouble)?
    ('controlIteration' controlIteration=EInt)?
    ('maxControlIterations' maxControlIterations=EInt)?
    ('controlMode' controlMode=controlModeType)?
    ('mostIterationsDone' mostIterationsDone=EInt)?
    ('algorithm' algorithm=algorithmType)?
    ('circuit' circuit=[common::Circuit|EString])?
    ('nodeV' nodeV=[DComplexMatrix1D|EString])?
    ('currents' currents=[DComplexMatrix1D|EString])?
    '}';

ControlQueue returns common::ControlQueue:
  {common::ControlQueue}
  (empty?='empty')?
  'ControlQueue'
;

Bus returns common::Bus:
  {common::Bus}
  (coordsDefined?='coordsDefined')?
  (busChecked?='busChecked')?
  (keep?='keep')?
  (radialBus?='radialBus')?
  'Bus'
  name=EString
  '{'
    ('vBus' vBus=EDouble)?
    ('busCurrent' busCurrent=EDouble)?
    ('zSC' zSC=EDouble)?
    ('ySC' ySC=EDouble)?
    ('x' x=EDouble)?
    ('y' y=EDouble)?
    ('kVBase' kVBase=EDouble)?
    '}';

Fault returns delivery::Fault:
  {delivery::Fault}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (temporary?='temporary')?
  'Fault'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('normAmps' normAmps=EDouble)?
    ('emergAmps' emergAmps=EDouble)?
    ('faultRate' faultRate=EDouble)?
    ('pctPerm' pctPerm=EDouble)?
    ('repair' repair=EInt)?
    ('bus1' bus1=EString)?
    ('bus2' bus2=EString)?
    ('r' r=EDouble)?
    ('pctStdDev' pctStdDev=EDouble)?
    ('onTime' onTime=EDouble)?
    ('minAmps' minAmps=EDouble)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('gMatrix' gMatrix=[DoubleMatrix2D|EString])?
    '}';

VoltageSource returns conversion::VoltageSource:
  {conversion::VoltageSource}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  'VoltageSource'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('spectrum' spectrum=EString)?
    ('injCurrent' injCurrent=EDouble)?
    ('bus1' bus1=EString)?
    ('baseKV' baseKV=EDouble)?
    ('perUnit' perUnit=EDouble)?
    ('angle' angle=EDouble)?
    ('frequency' frequency=EDouble)?
    ('mvaSC3' mvaSC3=EDouble)?
    ('mvaSC1' mvaSC1=EDouble)?
    ('x1R1' x1R1=EDouble)?
    ('x0R0' x0R0=EDouble)?
    ('iSC3' iSC3=EDouble)?
    ('iSC1' iSC1=EDouble)?
    ('r1' r1=EDouble)?
    ('x1' x1=EDouble)?
    ('r0' r0=EDouble)?
    ('x0' x0=EDouble)?
    ('scanType' scanType=sequenceType)?
    ('zSpecType' zSpecType=specType)?
    ('vMag' vMag=EDouble)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('spectrumObj' spectrumObj=[general::Spectrum|EString])?
    ('z' z=[DComplexMatrix2D|EString])?
    ('zInv' zInv=[DComplexMatrix2D|EString])?
    '}';

CurrentSource returns conversion::CurrentSource:
  {conversion::CurrentSource}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  'CurrentSource'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('spectrum' spectrum=EString)?
    ('injCurrent' injCurrent=EDouble)?
    ('bus1' bus1=EString)?
    ('amps' amps=EDouble)?
    ('angle' angle=EDouble)?
    ('frequency' frequency=EDouble)?
    ('phases' phases=EInt)?
    ('scanType' scanType=sequenceType)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('spectrumObj' spectrumObj=[general::Spectrum|EString])?
    '}';

Sensor returns meter::Sensor:
  {meter::Sensor}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  'Sensor'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('elementName' elementName=EString)?
    ('meteredTerminal' meteredTerminal=EInt)?
    ('element' element=EString)?
    ('terminal' ^terminal=EInt)?
    ('modes' '{' modes+=sensorMode ( "," modes+=sensorMode)* '}' )?
    ('v' '{' v+=EDouble ( "," v+=EDouble)* '}' )?
    ('i' '{' i+=EDouble ( "," i+=EDouble)* '}' )?
    ('p' '{' p+=EDouble ( "," p+=EDouble)* '}' )?
    ('q' '{' q+=EDouble ( "," q+=EDouble)* '}' )?
    ('phases' '{' phases+=EInt ( "," phases+=EInt)* '}' )?
    ('conn' conn=connectionType)?
    ('pctError' pctError=EDouble)?
    ('action' action=sensorAction)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('meteredElement' meteredElement=[common::CircuitElement|EString])?
    '}';

Monitor returns meter::Monitor:
  {meter::Monitor}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (residual?='residual')?
  (pPolar?='pPolar')?
  'Monitor'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('elementName' elementName=EString)?
    ('meteredTerminal' meteredTerminal=EInt)?
    ('element' element=EString)?
    ('terminal' ^terminal=EInt)?
    ('mode' mode=monitorValues)?
    ('action' action=monitorAction)?
    ('vIPolar' vIPolar=EBoolean)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('meteredElement' meteredElement=[common::CircuitElement|EString])?
    '}';

EnergyMeter returns meter::EnergyMeter:
  {meter::EnergyMeter}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (localOnly?='localOnly')?
  'EnergyMeter'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('elementName' elementName=EString)?
    ('meteredTerminal' meteredTerminal=EInt)?
    ('element' element=EString)?
    ('terminal' ^terminal=EInt)?
    ('action' action=meterAction)?
    ('option' '{' option+=EString ( "," option+=EString)* '}' )?
    ('kVANorm' kVANorm=EDouble)?
    ('kVAEmerg' kVAEmerg=EDouble)?
    ('peakCurrent' '{' peakCurrent+=EDouble ( "," peakCurrent+=EDouble)* '}' )?
    ('zoneList' '{' zoneList+=EString ( "," zoneList+=EString)* '}' )?
    ('mask' '{' mask+=EDouble ( "," mask+=EDouble)* '}' )?
    ('losses' losses=EBoolean)?
    ('lineLosses' lineLosses=EBoolean)?
    ('xfmrLosses' xfmrLosses=EBoolean)?
    ('seqLosses' seqLosses=EBoolean)?
    ('vBaseLosses' vBaseLosses=EBoolean)?
    ('overloadReport' overloadReport=EBoolean)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('meteredElement' meteredElement=[common::CircuitElement|EString])?
    '}';

Generator returns conversion::Generator:
  {conversion::Generator}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (forceOn?='forceOn')?
  (debugTrace?='debugTrace')?
  (genOn?='genOn')?
  (forcedOn?='forcedOn')?
  (fixed?='fixed')?
  'Generator'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('spectrum' spectrum=EString)?
    ('injCurrent' injCurrent=EDouble)?
    ('bus1' bus1=EString)?
    ('kV' kV=EDouble)?
    ('kW' kW=EDouble)?
    ('pf' pf=EDouble)?
    ('kVAr' kVAr=EDouble)?
    ('model' model=generatorModel)?
    ('vMinPU' vMinPU=EDouble)?
    ('vMaxPU' vMaxPU=EDouble)?
    ('yearly' yearly=EString)?
    ('daily' daily=EString)?
    ('duty' duty=EString)?
    ('dispMode' dispMode=dispatchType)?
    ('dispValue' dispValue=EDouble)?
    ('conn' conn=connectionType)?
    ('rNeut' rNeut=EDouble)?
    ('xNeut' xNeut=EDouble)?
    ('status' status=generatorStatus)?
    ('class' class=EInt)?
    ('vPU' vPU=EDouble)?
    ('vTarget' vTarget=EDouble)?
    ('maxKVAr' maxKVAr=EDouble)?
    ('minKVAr' minKVAr=EDouble)?
    ('pvFactor' pvFactor=EDouble)?
    ('kVA' kVA=EDouble)?
    ('MVA' MVA=EDouble)?
    ('xD' xD=EDouble)?
    ('xDp' xDp=EDouble)?
    ('xDpp' xDpp=EDouble)?
    ('h' h=EDouble)?
    ('d' d=EDouble)?
    ('userModel' userModel=EString)?
    ('userData' userData=EString)?
    ('shaftModel' shaftModel=EString)?
    ('shaftData' shaftData=EString)?
    ('shapeFactor' shapeFactor=Complex)?
    ('yEq' yEq=Complex)?
    ('yEq95' yEq95=Complex)?
    ('yEq105' yEq105=Complex)?
    ('vBase' vBase=EDouble)?
    ('vBase95' vBase95=EDouble)?
    ('vBase105' vBase105=EDouble)?
    ('varBase' varBase=EDouble)?
    ('varMin' varMin=EDouble)?
    ('varMax' varMax=EDouble)?
    ('deltaQMax' deltaQMax=EDouble)?
    ('dQdV' dQdV=EDouble)?
    ('dQdVSaved' dQdVSaved=EDouble)?
    ('yQFixed' yQFixed=EDouble)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('spectrumObj' spectrumObj=[general::Spectrum|EString])?
    '}';

Transformer returns delivery::Transformer:
  {delivery::Transformer}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (substation?='substation')?
  'Transformer'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('normAmps' normAmps=EDouble)?
    ('emergAmps' emergAmps=EDouble)?
    ('faultRate' faultRate=EDouble)?
    ('pctPerm' pctPerm=EDouble)?
    ('repair' repair=EInt)?
    ('windings' windings=EInt)?
    ('wdg' wdg=EInt)?
    ('bus' bus=EString)?
    ('conn' conn=connectionType)?
    ('kV' kV=EDouble)?
    ('kVA' kVA=EDouble)?
    ('tap' tap=EDouble)?
    ('rPct' rPct=EDouble)?
    ('rNeut' rNeut=EDouble)?
    ('xNeut' xNeut=EDouble)?
    ('buses' '{' buses+=EString ( "," buses+=EString)* '}' )?
    ('conns' '{' conns+=connectionType ( "," conns+=connectionType)* '}' )?
    ('kVs' '{' kVs+=EDouble ( "," kVs+=EDouble)* '}' )?
    ('kVAs' '{' kVAs+=EDouble ( "," kVAs+=EDouble)* '}' )?
    ('taps' '{' taps+=EDouble ( "," taps+=EDouble)* '}' )?
    ('xHL' xHL=EDouble)?
    ('xHT' xHT=EDouble)?
    ('xLT' xLT=EDouble)?
    ('xSCArray' '{' xSCArray+=EDouble ( "," xSCArray+=EDouble)* '}' )?
    ('thermal' thermal=EDouble)?
    ('n' n=EDouble)?
    ('m' m=EDouble)?
    ('fLRise' fLRise=EDouble)?
    ('hSRise' hSRise=EDouble)?
    ('pctLoadLoss' pctLoadLoss=EDouble)?
    ('pctNoLoadLoss' pctNoLoadLoss=EDouble)?
    ('normHKVa' normHKVa=EDouble)?
    ('emergHKVa' emergHKVa=EDouble)?
    ('maxTap' maxTap=EDouble)?
    ('minTap' minTap=EDouble)?
    ('numTaps' numTaps=EInt)?
    ('subName' subName=EString)?
    ('pctImage' pctImage=EDouble)?
    ('ppmAntiFloat' ppmAntiFloat=EDouble)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    '}';

CapacitorControl returns control::CapacitorControl:
  {control::CapacitorControl}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (voltOverride?='voltOverride')?
  'CapacitorControl'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('elementName' elementName=EString)?
    ('elementTerminal' elementTerminal=EInt)?
    ('controlledBusName' controlledBusName=EString)?
    ('monitoredVariable' monitoredVariable=EString)?
    ('monitoredVarIndex' monitoredVarIndex=EInt)?
    ('timeDelay' timeDelay=EDouble)?
    ('dblTraceParam' dblTraceParam=EDouble)?
    ('element' element=EString)?
    ('terminal' ^terminal=EInt)?
    ('capacitor' capacitor=EString)?
    ('type' type=controlType)?
    ('pTRatio' pTRatio=EDouble)?
    ('cTRatio' cTRatio=EDouble)?
    ('onSetting' onSetting=EDouble)?
    ('offSetting' offSetting=EDouble)?
    ('delay' delay=EDouble)?
    ('vMax' vMax=EDouble)?
    ('vMin' vMin=EDouble)?
    ('delayOff' delayOff=EDouble)?
    ('deadTime' deadTime=EDouble)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('controlledBus' controlledBus=[common::Bus|EString])?
    '}';

RegulatorControl returns control::RegulatorControl:
  {control::RegulatorControl}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (reversible?='reversible')?
  (debugTrace?='debugTrace')?
  (inverseTime?='inverseTime')?
  'RegulatorControl'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('elementName' elementName=EString)?
    ('elementTerminal' elementTerminal=EInt)?
    ('controlledBusName' controlledBusName=EString)?
    ('monitoredVariable' monitoredVariable=EString)?
    ('monitoredVarIndex' monitoredVarIndex=EInt)?
    ('timeDelay' timeDelay=EDouble)?
    ('dblTraceParam' dblTraceParam=EDouble)?
    ('transformer' transformer=EString)?
    ('winding' winding=EInt)?
    ('vReg' vReg=EDouble)?
    ('band' band=EDouble)?
    ('pTRatio' pTRatio=EDouble)?
    ('cTPrim' cTPrim=EDouble)?
    ('r' r=EDouble)?
    ('x' x=EDouble)?
    ('bus' bus=EString)?
    ('delay' delay=EDouble)?
    ('revVReg' revVReg=EDouble)?
    ('revBand' revBand=EDouble)?
    ('revR' revR=EDouble)?
    ('revX' revX=EDouble)?
    ('tapDelay' tapDelay=EDouble)?
    ('maxTapChange' maxTapChange=EInt)?
    ('tapWinding' tapWinding=EInt)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('controlledBus' controlledBus=[common::Bus|EString])?
    '}';

Line returns delivery::Line:
  {delivery::Line}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  (switch?='switch')?
  'Line'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('normAmps' normAmps=EDouble)?
    ('emergAmps' emergAmps=EDouble)?
    ('faultRate' faultRate=EDouble)?
    ('pctPerm' pctPerm=EDouble)?
    ('repair' repair=EInt)?
    ('bus1' bus1=EString)?
    ('bus2' bus2=EString)?
    ('lineCode' lineCode=EString)?
    ('length' length=EDouble)?
    ('r1' r1=EDouble)?
    ('x1' x1=EDouble)?
    ('r0' r0=EDouble)?
    ('x0' x0=EDouble)?
    ('c1' c1=EDouble)?
    ('c0' c0=EDouble)?
    ('rg' rg=EDouble)?
    ('xg' xg=EDouble)?
    ('rho' rho=EDouble)?
    ('geometry' geometry=EString)?
    ('units' units=lengthUnit)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('rMatrix' rMatrix=[DoubleMatrix2D|EString])?
    ('xMatrix' xMatrix=[DoubleMatrix2D|EString])?
    ('cMatrix' cMatrix=[DoubleMatrix2D|EString])?
    '}';

Load returns conversion::Load:
  {conversion::Load}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  'Load'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('spectrum' spectrum=EString)?
    ('injCurrent' injCurrent=EDouble)?
    ('bus1' bus1=EString)?
    ('kV' kV=EDouble)?
    ('kW' kW=EDouble)?
    ('kVAr' kVAr=EDouble)?
    ('pF' pF=EDouble)?
    ('model' model=loadModel)?
    ('loadSpec' loadSpec=loadSpecType)?
    ('yearly' yearly=EString)?
    ('daily' daily=EString)?
    ('duty' duty=EString)?
    ('growth' growth=EString)?
    ('conn' conn=connectionType)?
    ('rNeut' rNeut=EDouble)?
    ('xNeut' xNeut=EDouble)?
    ('status' status=loadStatus)?
    ('class' class=EInt)?
    ('vMinPU' vMinPU=EDouble)?
    ('vMaxPU' vMaxPU=EDouble)?
    ('vMinNorm' vMinNorm=EDouble)?
    ('vMinEmerg' vMinEmerg=EDouble)?
    ('xfKVA' xfKVA=EDouble)?
    ('allocationFactor' allocationFactor=EDouble)?
    ('kVA' kVA=EDouble)?
    ('pctMean' pctMean=EDouble)?
    ('pctStdDev' pctStdDev=EDouble)?
    ('cvrWatts' cvrWatts=EDouble)?
    ('cvrVars' cvrVars=EDouble)?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('spectrumObj' spectrumObj=[general::Spectrum|EString])?
    ('circuit' circuit=[common::Circuit|EString])?
    ('growthShapeObj' growthShapeObj=[general::GrowthShape|EString])?
    '}';

Capacitor returns delivery::Capacitor:
  {delivery::Capacitor}
  (enabled?='enabled')?
  (yPrimInvalid?='yPrimInvalid')?
  (checked?='checked')?
  (hasMeter?='hasMeter')?
  (isolated?='isolated')?
  (hasControl?='hasControl')?
  (partOfFeeder?='partOfFeeder')?
  'Capacitor'
  name=EString
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('nodeRef' '{' nodeRef+=EInt ( "," nodeRef+=EInt)* '}' )?
    ('yOrder' yOrder=EInt)?
    ('lastTerminalChecked' lastTerminalChecked=EInt)?
    ('nTerms' nTerms=EInt)?
    ('nConds' nConds=EInt)?
    ('nPhases' nPhases=EInt)?
    ('busIndex' busIndex=EInt)?
    ('yPrimFreq' yPrimFreq=EDouble)?
    ('normAmps' normAmps=EDouble)?
    ('emergAmps' emergAmps=EDouble)?
    ('faultRate' faultRate=EDouble)?
    ('pctPerm' pctPerm=EDouble)?
    ('repair' repair=EInt)?
    ('bus1' bus1=EString)?
    ('bus2' bus2=EString)?
    ('kVAr' kVAr=EDouble)?
    ('kV' kV=EDouble)?
    ('conn' conn=connectionType)?
    ('cuf' '{' cuf+=EDouble ( "," cuf+=EDouble)* '}' )?
    ('r' '{' r+=EDouble ( "," r+=EDouble)* '}' )?
    ('xl' '{' xl+=EDouble ( "," xl+=EDouble)* '}' )?
    ('harm' '{' harm+=EDouble ( "," harm+=EDouble)* '}' )?
    ('nSteps' nSteps=EInt)?
    ('states' '{' states+=EBoolean ( "," states+=EBoolean)* '}' )?
    ('controlElement' controlElement=[ecore::EClass|EString])?
    ('terminals' '(' terminals+=[common::Terminal|EString] ( "," terminals+=[common::Terminal|EString])* ')' )?
    ('activeTerminal' activeTerminal=[ecore::EClass|EString])?
    ('yPrimSeries' yPrimSeries=[DComplexMatrix2D|EString])?
    ('yPrimShunt' yPrimShunt=[DComplexMatrix2D|EString])?
    ('yPrim' yPrim=[DComplexMatrix2D|EString])?
    ('cMatrix' cMatrix=[DoubleMatrix2D|EString])?
    '}';

Feeder returns common::Feeder:
  {common::Feeder}
  'Feeder'
  '{'
    ('baseFreq' baseFreq=EDouble)?
    ('enabled' enabled=EBoolean)?
    ('spectrum' spectrum=[general::Spectrum|EString])?
    '}';

EString returns ecore::EString:
  STRING | ID;

EInt returns ecore::EInt:
  '-'? INT;

EDouble returns ecore::EDouble:
  '-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
  'true' | 'false';

enum solutionMode returns executive::solutionMode:
  Snapshot = 'Snapshot' | Daily = 'Daily' | Direct = 'Direct' | Dutycycle = 'Dutycycle' | Dynamic = 'Dynamic' | Harmonic = 'Harmonic' | MonteCarlo1 = 'MonteCarlo1' | MonteCarlo2 = 'MonteCarlo2' | MonteCarlo3 = 'MonteCarlo3' | FaultStudy = 'FaultStudy' | Yearly = 'Yearly' | MonteFault = 'MonteFault' | Peakday = 'Peakday' | LoadDuration1 = 'LoadDuration1' | LoadDuration2 = 'LoadDuration2' | AutoAdd = 'AutoAdd';

enum loadModelType returns executive::loadModelType:
  Powerflow = 'Powerflow' | Admittance = 'Admittance';

enum controlModeType returns common::controlModeType:
  EventDriven = 'EventDriven' | TimeDriven = 'TimeDriven' | Static = 'Static';

enum algorithmType returns common::algorithmType:
  NormalSolve = 'NormalSolve' | NewtonSolve = 'NewtonSolve';

EClass returns ecore::EClass:
  {ecore::EClass}
  (abstract?='abstract')?
  (interface?='interface')?
  'EClass'
  name=EString
  '{'
    ('instanceClassName' instanceClassName=EString)?
    ('instanceTypeName' instanceTypeName=EString)?
    ('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    ('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
    ('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
    ('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
    '}';

Terminal returns common::Terminal:
  {common::Terminal}
  (checked?='checked')?
  'Terminal'
  '{'
    ('busRef' busRef=EInt)?
    ('termNodeRef' '{' termNodeRef+=EInt ( "," termNodeRef+=EInt)* '}' )?
    ('nCond' nCond=EInt)?
    ('activeConductor' activeConductor=EInt)?
    ('conductors' '(' conductors+=[common::Conductor|EString] ( "," conductors+=[common::Conductor|EString])* ')' )?
    '}';

EAnnotation returns ecore::EAnnotation:
  {ecore::EAnnotation}
  'EAnnotation'
  '{'
    ('source' source=EString)?
    ('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
    ('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
    '}';

ETypeParameter returns ecore::ETypeParameter:
  {ecore::ETypeParameter}
  'ETypeParameter'
  name=EString
  '{'
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
    '}';

EOperation returns ecore::EOperation:
  {ecore::EOperation}
  'EOperation'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    ('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
    ('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
    '}';

EGenericType returns ecore::EGenericType:
  {ecore::EGenericType}
  'EGenericType'
  '{'
    ('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
    ('eClassifier' eClassifier=[ecore::EClassifier|EString])?
    ('eUpperBound' eUpperBound=EGenericType)?
    ('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
    ('eLowerBound' eLowerBound=EGenericType)?
    '}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
  {ecore::EStringToStringMapEntry}
  'EStringToStringMapEntry'
  '{'
    ('key' key=EString)?
    ('value' value=EString)?
    '}';

EObject returns ecore::EObject:
  {ecore::EObject}
  'EObject'
;

EParameter returns ecore::EParameter:
  {ecore::EParameter}
  'EParameter'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    '}';

EDataType_Impl returns ecore::EDataType:
  {ecore::EDataType}
  'EDataType'
  name=EString
  '{'
    ('instanceClassName' instanceClassName=EString)?
    ('instanceTypeName' instanceTypeName=EString)?
    ('serializable' serializable=EBoolean)?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    '}';

EEnum returns ecore::EEnum:
  {ecore::EEnum}
  'EEnum'
  name=EString
  '{'
    ('instanceClassName' instanceClassName=EString)?
    ('instanceTypeName' instanceTypeName=EString)?
    ('serializable' serializable=EBoolean)?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    ('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
    '}';

EEnumLiteral returns ecore::EEnumLiteral:
  {ecore::EEnumLiteral}
  'EEnumLiteral'
  name=EString
  '{'
    ('value' value=EInt)?
    ('literal' literal=EString)?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    '}';

EAttribute returns ecore::EAttribute:
  {ecore::EAttribute}
  (volatile?='volatile')?
  (transient?='transient')?
  (unsettable?='unsettable')?
  (derived?='derived')?
  (iD?='iD')?
  'EAttribute'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('changeable' changeable=EBoolean)?
    ('defaultValueLiteral' defaultValueLiteral=EString)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    '}';

EReference returns ecore::EReference:
  {ecore::EReference}
  (volatile?='volatile')?
  (transient?='transient')?
  (unsettable?='unsettable')?
  (derived?='derived')?
  (containment?='containment')?
  'EReference'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('changeable' changeable=EBoolean)?
    ('defaultValueLiteral' defaultValueLiteral=EString)?
    ('resolveProxies' resolveProxies=EBoolean)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eOpposite' eOpposite=[ecore::EReference|EString])?
    ('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    '}';

Spectrum returns general::Spectrum:
  {general::Spectrum}
  'Spectrum'
  '{'
    ('nHarm' nHarm=EInt)?
    ('harmonic' '{' harmonic+=EDouble ( "," harmonic+=EDouble)* '}' )?
    ('pctMag' pctMag=EDouble)?
    ('angle' '{' angle+=EDouble ( "," angle+=EDouble)* '}' )?
    ('csvFile' csvFile=EString)?
    '}';

enum sequenceType returns conversion::sequenceType:
  Positive = 'Positive' | Zero = 'Zero' | None = 'None';

enum specType returns conversion::specType:
  MVASc = 'MVASc' | ISc = 'ISc' | Z1Z0 = 'Z1Z0';

enum sensorMode returns meter::sensorMode:
  Voltage = 'Voltage' | Current = 'Current' | kW = 'kW' | kVar = 'kVar';

enum connectionType returns common::connectionType:
  Wye = 'Wye' | LN = 'LN' | Delta = 'Delta' | LL = 'LL';

enum sensorAction returns meter::sensorAction:
  SquareError = 'SquareError' | ActualValues = 'ActualValues';

enum monitorValues returns meter::monitorValues:
  V_I = 'V_I' | P_Q = 'P_Q' | Tap_Position = 'Tap_Position' | State_Variables = 'State_Variables';

enum monitorAction returns meter::monitorAction:
  Clear = 'Clear' | Save = 'Save' | Take = 'Take';

enum meterAction returns meter::meterAction:
  Clear = 'Clear' | Save = 'Save' | Take = 'Take' | Zonedump = 'Zonedump' | Allocate = 'Allocate' | Reduce = 'Reduce';

enum generatorModel returns conversion::generatorModel:
  Constant_kW = 'Constant_kW' | Constant_Y = 'Constant_Y' | Constant_kW_and_kV = 'Constant_kW_and_kV' | Const_kW_Fixed_Q = 'Const_kW_Fixed_Q' | Const_kW_Fixed_Q_Const_X = 'Const_kW_Fixed_Q_Const_X' | User_model = 'User_model' | Const_kW_KVAr_Limited_I = 'Const_kW_KVAr_Limited_I';

enum dispatchType returns conversion::dispatchType:
  LoadMode = 'LoadMode' | PriceMode = 'PriceMode';

enum generatorStatus returns conversion::generatorStatus:
  Variable = 'Variable' | Fixed = 'Fixed';

Complex returns Complex:
  'Complex' /* TODO: implement this rule and an appropriate IValueConverter */;

enum controlType returns control::controlType:
  Current = 'Current' | Voltage = 'Voltage' | kVAr = 'kVAr' | Time = 'Time';

enum lengthUnit returns common::lengthUnit:
  none = 'none' | mi = 'mi' | km = 'km' | kft = 'kft' | m = 'm' | me = 'me' | ft = 'ft' | in = 'in' | cm = 'cm';

GrowthShape returns general::GrowthShape:
  {general::GrowthShape}
  'GrowthShape'
  '{'
    ('nPts' nPts=EInt)?
    ('year' '{' year+=EDouble ( "," year+=EDouble)* '}' )?
    ('csvFile' csvFile=EString)?
    ('sngFile' sngFile=EString)?
    ('dblFile' dblFile=EString)?
    '}';

enum loadModel returns conversion::loadModel:
  PQ = 'PQ' | Const_Y = 'Const_Y' | Motor = 'Motor' | Linear_P_Quad_Q = 'Linear_P_Quad_Q' | Const_I = 'Const_I' | Const_P_Fixed_Q = 'Const_P_Fixed_Q' | Const_P_Fixed_Z = 'Const_P_Fixed_Z';

enum loadSpecType returns conversion::loadSpecType:
  kW_PF = 'kW_PF' | kW_kVar = 'kW_kVar' | kVA_PF = 'kVA_PF';

enum loadStatus returns conversion::loadStatus:
  Variable = 'Variable' | Fixed = 'Fixed' | Exempt = 'Exempt';
