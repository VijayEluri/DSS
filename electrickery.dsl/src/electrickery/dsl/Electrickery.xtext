grammar electrickery.dsl.ElectrickeryDSL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.electrickery.com/common" as common
import "http://www.electrickery.com/general" as general
import "http://www.electrickery.com/delivery" as delivery
import "http://www.electrickery.com/executive" as executive
import "http://www.electrickery.com/conversion" as conversion
import "http://www.electrickery.com/control" as control
import "http://www.electrickery.com/meter" as meter

Electrickery returns common::Electrickery:
  {common::Electrickery}
  (executives+=[executive::Executive]*)
  (wireData+=[general::WireData]*)?
  (lineGeometries+=[general::LineGeometry]*)?;

Executive returns executive::Executive:
  {executive::Executive}
  ("Clear"|"clear")
  (circuits+=[common::Circuit]*);

Circuit returns common::Circuit:
  {common::Circuit}
  NEW ('object=')?('Circuit'|'circuit')('.'name=EString)?
  (lines+=[delivery::Line]*)?;

Line returns delivery::Line:
  {delivery::Line}
  NEW ('object=')?('Line'|'line')('.'name=EString)?
    ('baseFreq=' baseFreq=EDouble)?
    ('nTerms=' nTerms=EInt)?
    ('nConds=' nConds=EInt)?
    ('nPhases=' nPhases=EInt)?
    ('yPrimFreq=' yPrimFreq=EDouble)?
    ('normAmps=' normAmps=EDouble)?
    ('emergAmps=' emergAmps=EDouble)?
    ('faultRate=' faultRate=EDouble)?
    ('pctPerm=' pctPerm=EDouble)?
    ('repair=' repair=EInt)?
    ('bus1=' bus1=EString)?
    ('bus2=' bus2=EString)?
    ('lineCode=' lineCode=EString)?
    ('length=' length=EDouble)?
    ('r1=' r1=EDouble)?
    ('x1=' x1=EDouble)?
    ('r0=' r0=EDouble)?
    ('x0=' x0=EDouble)?
    ('c1=' c1=EDouble)?
    ('c0=' c0=EDouble)?
    ('rg=' rg=EDouble)?
    ('xg=' xg=EDouble)?
    ('rho=' rho=EDouble)?
    ('units=' units=lengthUnit)?;

WireData returns general::WireData:
  {general::WireData}
  NEW ('object=')?('WireData'|'wiredata')('.'name=EString)?
    (('Runits='|'runits='|'rUnits=')? rUnits=lengthUnit)?
    (('Rac='|'rac='|'rAC=')? rAC=EDouble)?
    (('GMRunits='|'gmrunits='|'gmrUnits=')? gmrUnits=lengthUnit)?
    (('GMRac='|'gmrac='|'gmrAC=')? gmrAC=EDouble)?
    (('Radunits='|'radunits='|'radUnits')? radUnits=lengthUnit)?
    (('Diam='|'diam='|'diameter=')? diameter=EDouble)?;

LineGeometry returns general::LineGeometry:
  {general::LineGeometry}
  NEW ('object=')?('LineGeometry'|'linegeometry')('.'name=EString)?;

terminal NEW:
	('New'|'new');

enum sequenceType returns conversion::sequenceType:
  Positive = 'Positive' | Zero = 'Zero' | None = 'None';

enum specType returns conversion::specType:
  MVASc = 'MVASc' | ISc = 'ISc' | Z1Z0 = 'Z1Z0';

enum sensorMode returns meter::sensorMode:
  Voltage = 'Voltage' | Current = 'Current' | kW = 'kW' | kVar = 'kVar';

enum connectionType returns common::connectionType:
  Wye = 'Wye' | LN = 'LN' | Delta = 'Delta' | LL = 'LL';

enum sensorAction returns meter::sensorAction:
  SquareError = 'SquareError' | ActualValues = 'ActualValues';

enum monitorValues returns meter::monitorValues:
  V_I = 'V_I' | P_Q = 'P_Q' | Tap_Position = 'Tap_Position' | State_Variables = 'State_Variables';

enum monitorAction returns meter::monitorAction:
  Clear = 'Clear' | Save = 'Save' | Take = 'Take';

enum meterAction returns meter::meterAction:
  Clear = 'Clear' | Save = 'Save' | Take = 'Take' | Zonedump = 'Zonedump' | Allocate = 'Allocate' | Reduce = 'Reduce';

enum generatorModel returns conversion::generatorModel:
  Constant_kW = 'Constant_kW' | Constant_Y = 'Constant_Y' | Constant_kW_and_kV = 'Constant_kW_and_kV' | Const_kW_Fixed_Q = 'Const_kW_Fixed_Q' | Const_kW_Fixed_Q_Const_X = 'Const_kW_Fixed_Q_Const_X' | User_model = 'User_model' | Const_kW_KVAr_Limited_I = 'Const_kW_KVAr_Limited_I';

enum dispatchType returns conversion::dispatchType:
  LoadMode = 'LoadMode' | PriceMode = 'PriceMode';

enum generatorStatus returns conversion::generatorStatus:
  Variable = 'Variable' | Fixed = 'Fixed';

enum controlType returns control::controlType:
  Current = 'Current' | Voltage = 'Voltage' | kVAr = 'kVAr' | Time = 'Time';

enum lengthUnit returns common::lengthUnit:
  none = 'none' | mi = 'mi' | km = 'km' | kft = 'kft' | m = 'm' | me = 'me' | ft = 'ft' | in = 'in' | cm = 'cm';

enum loadModel returns conversion::loadModel:
  PQ = 'PQ' | Const_Y = 'Const_Y' | Motor = 'Motor' | Linear_P_Quad_Q = 'Linear_P_Quad_Q' | Const_I = 'Const_I' | Const_P_Fixed_Q = 'Const_P_Fixed_Q' | Const_P_Fixed_Z = 'Const_P_Fixed_Z';

enum loadSpecType returns conversion::loadSpecType:
  kW_PF = 'kW_PF' | kW_kVar = 'kW_kVar' | kVA_PF = 'kVA_PF';

enum loadStatus returns conversion::loadStatus:
  Variable = 'Variable' | Fixed = 'Fixed' | Exempt = 'Exempt';

EString returns ecore::EString:
  STRING | ID;

EInt returns ecore::EInt:
  '-'? INT;

EDouble returns ecore::EDouble:
  '-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EBoolean returns ecore::EBoolean:
  'true' | 'false';

EStructuralFeature returns ecore::EStructuralFeature:
  EAttribute | EReference;

EClassifier returns ecore::EClassifier:
  EClass | EDataType_Impl | EEnum;

EClass returns ecore::EClass:
  {ecore::EClass}
  (abstract?='abstract')?
  (interface?='interface')?
  'EClass'
  name=EString
  '{'
    ('instanceClassName' instanceClassName=EString)?
    ('instanceTypeName' instanceTypeName=EString)?
    ('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    ('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
    ('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
    ('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
    '}';

EAnnotation returns ecore::EAnnotation:
  {ecore::EAnnotation}
  'EAnnotation'
  '{'
    ('source' source=EString)?
    ('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
    ('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
    '}';

ETypeParameter returns ecore::ETypeParameter:
  {ecore::ETypeParameter}
  'ETypeParameter'
  name=EString
  '{'
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
    '}';

EOperation returns ecore::EOperation:
  {ecore::EOperation}
  'EOperation'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    ('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
    ('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
    '}';

EGenericType returns ecore::EGenericType:
  {ecore::EGenericType}
  'EGenericType'
  '{'
    ('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
    ('eClassifier' eClassifier=[ecore::EClassifier|EString])?
    ('eUpperBound' eUpperBound=EGenericType)?
    ('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
    ('eLowerBound' eLowerBound=EGenericType)?
    '}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
  {ecore::EStringToStringMapEntry}
  'EStringToStringMapEntry'
  '{'
    ('key' key=EString)?
    ('value' value=EString)?
    '}';

EObject returns ecore::EObject:
  {ecore::EObject}
  'EObject'
;

EParameter returns ecore::EParameter:
  {ecore::EParameter}
  'EParameter'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    '}';

EDataType_Impl returns ecore::EDataType:
  {ecore::EDataType}
  'EDataType'
  name=EString
  '{'
    ('instanceClassName' instanceClassName=EString)?
    ('instanceTypeName' instanceTypeName=EString)?
    ('serializable' serializable=EBoolean)?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    '}';

EEnum returns ecore::EEnum:
  {ecore::EEnum}
  'EEnum'
  name=EString
  '{'
    ('instanceClassName' instanceClassName=EString)?
    ('instanceTypeName' instanceTypeName=EString)?
    ('serializable' serializable=EBoolean)?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    ('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
    '}';

EEnumLiteral returns ecore::EEnumLiteral:
  {ecore::EEnumLiteral}
  'EEnumLiteral'
  name=EString
  '{'
    ('value' value=EInt)?
    ('literal' literal=EString)?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    '}';

EAttribute returns ecore::EAttribute:
  {ecore::EAttribute}
  (volatile?='volatile')?
  (transient?='transient')?
  (unsettable?='unsettable')?
  (derived?='derived')?
  (iD?='iD')?
  'EAttribute'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('changeable' changeable=EBoolean)?
    ('defaultValueLiteral' defaultValueLiteral=EString)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    '}';

EReference returns ecore::EReference:
  {ecore::EReference}
  (volatile?='volatile')?
  (transient?='transient')?
  (unsettable?='unsettable')?
  (derived?='derived')?
  (containment?='containment')?
  'EReference'
  name=EString
  '{'
    ('ordered' ordered=EBoolean)?
    ('unique' unique=EBoolean)?
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('changeable' changeable=EBoolean)?
    ('defaultValueLiteral' defaultValueLiteral=EString)?
    ('resolveProxies' resolveProxies=EBoolean)?
    ('eType' eType=[ecore::EClassifier|EString])?
    ('eOpposite' eOpposite=[ecore::EReference|EString])?
    ('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
    ('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    ('eGenericType' eGenericType=EGenericType)?
    '}';