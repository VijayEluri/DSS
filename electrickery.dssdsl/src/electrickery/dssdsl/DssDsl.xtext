// automatically generated by Xtext
grammar electrickery.dssdsl.DssDsl with org.eclipse.xtext.common.Terminals

import "http://www.electrickery.com/executive" as executive

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "http://www.electrickery.com/common" as common

import "http://www.electrickery.com/meter" as meter

import "http://www.electrickery.com/"

import "http://www.electrickery.com/delivery" as delivery

import "http://www.electrickery.com/general" as general

import "http://www.electrickery.com/conversion" as conversion

import "http://www.electrickery.com/control" as control

Electrickery returns common::Electrickery:
	{common::Electrickery}
	'Electrickery'
	'{'
		('wireData' '{' wireData+=WireData ( "," wireData+=WireData)* '}' )?
		('lineGeometries' '{' lineGeometries+=LineGeometry ( "," lineGeometries+=LineGeometry)* '}' )?
		('growthShapes' '{' growthShapes+=GrowthShape ( "," growthShapes+=GrowthShape)* '}' )?
		('lineCodes' '{' lineCodes+=LineCode ( "," lineCodes+=LineCode)* '}' )?
		('loadShapes' '{' loadShapes+=LoadShape ( "," loadShapes+=LoadShape)* '}' )?
		('spectrums' '{' spectrums+=Spectrum ( "," spectrums+=Spectrum)* '}' )?
		('executives' '{' executives+=Executive ( "," executives+=Executive)* '}' )?
    '}';


EStructuralFeature returns ecore::EStructuralFeature:
	EAttribute | EReference;

EClassifier returns ecore::EClassifier:
	EClass | EDataType_Impl | EEnum;

WireData returns general::WireData:
	{general::WireData}
	'WireData'
	name=EString
	'{'
		('rDC' rDC=EDouble)?
		('rAC' rAC=EDouble)?
		('rUnits' rUnits=lengthUnit)?
		('gmrAC' gmrAC=EDouble)?
		('gmrUnits' gmrUnits=lengthUnit)?
		('radius' radius=EDouble)?
		('radUnits' radUnits=lengthUnit)?
		('normAmps' normAmps=EDouble)?
		('emergAmps' emergAmps=EDouble)?
		('diameter' diameter=EDouble)?
    '}';

LineGeometry returns general::LineGeometry:
	(reduce?='reduce')?
	'LineGeometry'
	name=EString
	'{'
		('nConds' nConds=EInt)?
		('nPhases' nPhases=EInt)?
		('cond' cond=EInt)?
		('x' x=EDouble)?
		('h' h=EDouble)?
		('units' units=lengthUnit)?
		('normAmps' normAmps=EDouble)?
		('emergAmps' emergAmps=EDouble)?
		'wire' wire=[general::WireData|EString]
    '}';

GrowthShape returns general::GrowthShape:
	{general::GrowthShape}
	'GrowthShape'
	'{'
		('nPts' nPts=EInt)?
		('year' '{' year+=EDouble ( "," year+=EDouble)* '}' )?
		('csvFile' csvFile=EString)?
		('sngFile' sngFile=EString)?
		('dblFile' dblFile=EString)?
    '}';

LineCode returns general::LineCode:
	{general::LineCode}
	(kron?='kron')?
	'LineCode'
	'{'
		('nPhases' nPhases=EInt)?
		('r1' r1=EDouble)?
		('x1' x1=EDouble)?
		('r0' r0=EDouble)?
		('x0' x0=EDouble)?
		('c1' c1=EDouble)?
		('c0' c0=EDouble)?
		('units' units=lengthUnit)?
		('baseFreq' baseFreq=EDouble)?
		('normAmps' normAmps=EDouble)?
		('emergAmps' emergAmps=EDouble)?
		('faultRate' faultRate=EDouble)?
		('pctPerm' pctPerm=EInt)?
		('repair' repair=EInt)?
		('rg' rg=EDouble)?
		('xg' xg=EDouble)?
		('rho' rho=EDouble)?
		('neutral' neutral=EInt)?
		('rMatrix' rMatrix=[DoubleMatrix2D|EString])?
		('xMatrix' xMatrix=[DoubleMatrix2D|EString])?
		('cMatrix' cMatrix=[DoubleMatrix2D|EString])?
    '}';

LoadShape returns general::LoadShape:
	{general::LoadShape}
	'LoadShape'
	'{'
		('nPts' nPts=EInt)?
		('interval' interval=EInt)?
		('mult' '{' mult+=EDouble ( "," mult+=EDouble)* '}' )?
		('hour' '{' hour+=EDouble ( "," hour+=EDouble)* '}' )?
		('mean' mean=EDouble)?
		('stdDev' stdDev=EDouble)?
		('csvFile' csvFile=EString)?
		('sngFile' sngFile=EString)?
		('dblFile' dblFile=EString)?
		('qMult' '{' qMult+=EDouble ( "," qMult+=EDouble)* '}' )?
    '}';

Spectrum returns general::Spectrum:
	{general::Spectrum}
	'Spectrum'
	'{'
		('nHarm' nHarm=EInt)?
		('harmonic' '{' harmonic+=EDouble ( "," harmonic+=EDouble)* '}' )?
		('pctMag' pctMag=EDouble)?
		('angle' '{' angle+=EDouble ( "," angle+=EDouble)* '}' )?
		('csvFile' csvFile=EString)?
    '}';

Executive returns executive::Executive:
	{executive::Executive}
	'Executive'
	'{'
		('command' command=EString)?
		('maxCircuits' maxCircuits=EInt)?
//		('activeCircuit' activeCircuit=[common::Circuit|EString])?
//		('execCommands' execCommands=ExecCommands)?
//		('execOptions' execOptions=ExecOptions)?
//		('circuits' '{' circuits+=Circuit ( "," circuits+=Circuit)* '}' )?
    '}';

EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum lengthUnit returns common::lengthUnit:
	none = 'none' | mi = 'mi' | km = 'km' | kft = 'kft' | m = 'm' | me = 'me' | ft = 'ft' | in = 'in' | cm = 'cm';

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EAnnotation returns ecore::EAnnotation:
	{ecore::EAnnotation}
	'EAnnotation'
	'{'
		('source' source=EString)?
		('references' '(' references+=[ecore::EObject|EString] ( "," references+=[ecore::EObject|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('details' '{' details+=EStringToStringMapEntry ( "," details+=EStringToStringMapEntry)* '}' )?
		('contents' '{' contents+=EObject ( "," contents+=EObject)* '}' )?
    '}';

ETypeParameter returns ecore::ETypeParameter:
	{ecore::ETypeParameter}
	'ETypeParameter'
	name=EString
	'{'
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eBounds' '{' eBounds+=EGenericType ( "," eBounds+=EGenericType)* '}' )?
    '}';

EOperation returns ecore::EOperation:
	{ecore::EOperation}
	'EOperation'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eExceptions' '(' eExceptions+=[ecore::EClassifier|EString] ( "," eExceptions+=[ecore::EClassifier|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eParameters' '{' eParameters+=EParameter ( "," eParameters+=EParameter)* '}' )?
		('eGenericExceptions' '{' eGenericExceptions+=EGenericType ( "," eGenericExceptions+=EGenericType)* '}' )?
    '}';

EGenericType returns ecore::EGenericType:
	{ecore::EGenericType}
	'EGenericType'
	'{'
		('eTypeParameter' eTypeParameter=[ecore::ETypeParameter|EString])?
		('eClassifier' eClassifier=[ecore::EClassifier|EString])?
		('eUpperBound' eUpperBound=EGenericType)?
		('eTypeArguments' '{' eTypeArguments+=EGenericType ( "," eTypeArguments+=EGenericType)* '}' )?
		('eLowerBound' eLowerBound=EGenericType)?
    '}';

EStringToStringMapEntry returns ecore::EStringToStringMapEntry:
	{ecore::EStringToStringMapEntry}
	'EStringToStringMapEntry'
	'{'
		('key' key=EString)?
		('value' value=EString)?
    '}';

EClass returns ecore::EClass:
	{ecore::EClass}
	(abstract?='abstract')?
	(interface?='interface')?
	'EClass'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('eSuperTypes' '(' eSuperTypes+=[ecore::EClass|EString] ( "," eSuperTypes+=[ecore::EClass|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eOperations' '{' eOperations+=EOperation ( "," eOperations+=EOperation)* '}' )?
		('eStructuralFeatures' '{' eStructuralFeatures+=EStructuralFeature ( "," eStructuralFeatures+=EStructuralFeature)* '}' )?
		('eGenericSuperTypes' '{' eGenericSuperTypes+=EGenericType ( "," eGenericSuperTypes+=EGenericType)* '}' )?
    '}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
;

EParameter returns ecore::EParameter:
	{ecore::EParameter}
	'EParameter'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
    '}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
    '}';

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=EString
	'{'
		('instanceClassName' instanceClassName=EString)?
		('instanceTypeName' instanceTypeName=EString)?
		('serializable' serializable=EBoolean)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eTypeParameters' '{' eTypeParameters+=ETypeParameter ( "," eTypeParameters+=ETypeParameter)* '}' )?
		('eLiterals' '{' eLiterals+=EEnumLiteral ( "," eLiterals+=EEnumLiteral)* '}' )?
    '}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=EString
	'{'
		('value' value=EInt)?
		('literal' literal=EString)?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
    '}';

EAttribute returns ecore::EAttribute:
	{ecore::EAttribute}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(iD?='iD')?
	'EAttribute'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
    '}';

EReference returns ecore::EReference:
	{ecore::EReference}
	(volatile?='volatile')?
	(transient?='transient')?
	(unsettable?='unsettable')?
	(derived?='derived')?
	(containment?='containment')?
	'EReference'
	name=EString
	'{'
		('ordered' ordered=EBoolean)?
		('unique' unique=EBoolean)?
		('lowerBound' lowerBound=EInt)?
		('upperBound' upperBound=EInt)?
		('changeable' changeable=EBoolean)?
		('defaultValueLiteral' defaultValueLiteral=EString)?
		('resolveProxies' resolveProxies=EBoolean)?
		('eType' eType=[ecore::EClassifier|EString])?
		('eOpposite' eOpposite=[ecore::EReference|EString])?
		('eKeys' '(' eKeys+=[ecore::EAttribute|EString] ( "," eKeys+=[ecore::EAttribute|EString])* ')' )?
		('eAnnotations' '{' eAnnotations+=EAnnotation ( "," eAnnotations+=EAnnotation)* '}' )?
		('eGenericType' eGenericType=EGenericType)?
    '}';